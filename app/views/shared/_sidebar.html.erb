<!-- Unified Collapse Toggle Button (visible when both sidebars are collapsed) -->
<% if defined?(@entries_sidebar_collapsed) %>
  <button id="unifiedSidebarCollapseBtn" class="btn btn-dark <%= 'd-none' unless @sidebar_collapsed %>" style="position: fixed; right: 16px; top: 16px; z-index: 1050;">
    <i class="fa-solid fa-bars"></i>
  </button>
<% else %>
  <button id="sidebarCollapseBtn" class="btn btn-dark <%= 'd-none' unless @sidebar_collapsed %>" style="position: fixed; left: 16px; top: 140px; z-index: 1050;">
    <i class="fa-solid fa-bars"></i>
  </button>
<% end %>

<!-- Left Sidebar -->
<div id="mainSidebar" class="sidebar-left bg-dark text-white <%= 'd-none' if @sidebar_collapsed %>" style="width: 280px; position: fixed; left: 0; top: 80px; height: calc(100vh - 80px); display: flex; flex-direction: column; z-index: 1020;">
  <!-- Sidebar Header -->
  <div class="p-3 border-bottom border-secondary d-flex justify-content-between align-items-center" style="flex: 0 0 auto;">
    <h5 class="mb-0">Your Library</h5>
    <% if defined?(@entries_sidebar_collapsed) %>
      <button class="unified-collapse-btn btn btn-sm btn-outline-light">
        <i class="fa-solid fa-bars"></i>
      </button>
    <% else %>
      <button id="sidebarExpandBtn" class="btn btn-sm btn-outline-light">
        <i class="fa-solid fa-bars"></i>
      </button>
    <% end %>
  </div>

  <!-- Lists Section (Scrollable) -->
  <div class="p-3" style="flex: 1 1 auto; overflow-y: auto; scrollbar-width: none; -ms-overflow-style: none;">
    <h6 class="text-muted mb-3" style="font-size: 0.75rem; text-transform: uppercase;">Lists</h6>
    <div class="list-group list-group-flush">
      <% current_user.subscribed_lists.order(:name).each do |list| %>
        <%
          # Check if this is the current entry's list (for watch page)
          is_current = if defined?(@entry) && @entry && @entry.list
            @entry.list.id == list.id
          elsif @list && @list.persisted?
            @list.id == list.id
          else
            false
          end
          # Link to watch_current if on watch page, otherwise to list show
          link_path = defined?(@entry) && @entry && @entry.persisted? ? list_watch_current_path(list) : list_path(list)
        %>
        <%= link_to link_path, class: "list-group-item list-group-item-action bg-transparent text-white border-0 py-2 px-0 mb-1 #{'active-list' if is_current}", style: "border-radius: 6px; #{is_current ? 'background-color: rgba(255, 255, 255, 0.15) !important;' : ''}" do %>
          <div class="d-flex align-items-center">
            <i class="fa-solid fa-list me-3 text-muted"></i>
            <span class="text-truncate"><%= list.name %></span>
          </div>
        <% end %>
      <% end %>
    </div>
  </div>

  <!-- Now Playing Section (Fixed at Bottom) -->
  <div class="border-top border-secondary" style="flex: 0 0 auto; background: linear-gradient(135deg, #191414 0%, #2d2d2d 100%);">
    <!-- Now Playing Header (Always Visible) -->
    <div class="p-3 pb-2 border-bottom border-secondary d-flex justify-content-between align-items-center" style="cursor: pointer;" id="nowPlayingToggle">
      <h6 class="text-muted mb-0" style="font-size: 0.85rem; text-transform: uppercase; font-weight: 700;">Now Playing</h6>
      <i id="nowPlayingCaretIcon" class="fa-solid <%= @now_playing_collapsed ? 'fa-caret-up' : 'fa-caret-down' %> text-muted"></i>
    </div>

    <!-- Now Playing Content (Collapsible) -->
    <div id="nowPlayingContent" class="p-3 pt-3 <%= 'd-none' if @now_playing_collapsed %>" style="transition: all 0.3s ease;">
      <%
        # Priority: 1) Current entry on watch page, 2) List's current entry, 3) Global now playing
        now_playing = if defined?(@entry) && @entry
          # On watch page - show the entry being watched
          @entry
        elsif @list && current_user
          # On list show page - show user's current entry in that list
          @list.current_entry(current_user)
        else
          # Other pages - show global now playing
          @now_playing_entry || find_now_playing_for_sidebar
        end
      %>
      <% if now_playing && now_playing.persisted? %>
        <%= link_to watch_entry_path(now_playing), class: "text-decoration-none now-playing-card" do %>
          <div class="d-flex flex-column align-items-center text-center">
            <div class="now-playing-poster-container" style="width: 200px; height: 300px; margin-bottom: 12px; border-radius: 10px; overflow: hidden; box-shadow: 0 8px 24px rgba(0, 0, 0, 0.6); position: relative;">
              <%= entry_poster_image_tag(now_playing, class: 'img-fluid', style: 'width: 100%; height: 100%; object-fit: cover;') %>
              <div class="now-playing-overlay">
                <div class="overlay-content">
                  <p class="mb-1"><strong><%= now_playing.list.name %></strong></p>
                  <% if now_playing.series.present? %>
                    <p class="mb-1 text-muted small"><%= now_playing.series %></p>
                  <% end %>
                  <p class="mb-2"><%= now_playing.name %></p>
                  <i class="fa-solid fa-play fa-3x"></i>
                </div>
              </div>
            </div>
          </div>
        <% end %>
      <% else %>
        <div class="d-flex flex-column align-items-center text-center">
          <div style="width: 200px; height: 300px; margin-bottom: 12px; border-radius: 10px; overflow: hidden;">
            <img src="/images/please_stand_by.png" class="img-fluid" style="width: 100%; height: 100%; object-fit: cover;" alt="No content">
          </div>
          <p class="mb-0 text-white fw-bold">Nothing playing</p>
        </div>
      <% end %>
    </div>
  </div>
</div>

<script>
// Global flag to prevent multiple initializations
window.sidebarInitialized = false;

function initializeSidebar() {
  if (window.sidebarInitialized) return;

  const sidebar = document.getElementById('mainSidebar');
  const collapseBtn = document.getElementById('sidebarCollapseBtn');
  const expandBtn = document.getElementById('sidebarExpandBtn');
  const pageContainer = document.getElementById('pageContainer');

  console.log('Initializing sidebar:', { sidebar: !!sidebar, collapseBtn: !!collapseBtn, expandBtn: !!expandBtn, pageContainer: !!pageContainer });

  if (!sidebar || !collapseBtn || !expandBtn) {
    // If elements aren't ready, try again in a short time
    console.log('Elements not ready, retrying in 50ms');
    setTimeout(initializeSidebar, 50);
    return;
  }

  window.sidebarInitialized = true;
  console.log('Sidebar initialized successfully');

  // Ensure initial state is correct (defensive programming)
  const isCollapsed = sidebar.classList.contains('d-none');
  if (pageContainer) {
    if (isCollapsed) {
      pageContainer.style.marginLeft = '0';
      pageContainer.style.width = '100%';
      sidebar.style.display = 'none';
      sidebar.style.visibility = 'hidden';
      sidebar.style.opacity = '0';
      sidebar.style.pointerEvents = 'none';
      collapseBtn.style.display = 'block';
    } else {
      pageContainer.style.marginLeft = '280px';
      pageContainer.style.width = 'calc(100% - 280px)';
      sidebar.style.display = 'flex';
      sidebar.style.visibility = 'visible';
      sidebar.style.opacity = '1';
      sidebar.style.pointerEvents = 'auto';
      collapseBtn.style.display = 'none';
    }
  }

  // Collapse sidebar
  expandBtn.addEventListener('click', function(e) {
    e.preventDefault();
    sidebar.classList.add('d-none');
    sidebar.style.display = 'none';
    sidebar.style.visibility = 'hidden';
    sidebar.style.opacity = '0';
    sidebar.style.pointerEvents = 'none';
    collapseBtn.classList.remove('d-none');
    collapseBtn.style.display = 'block';
    document.body.classList.add('sidebar-collapsed');
    if (pageContainer) {
      pageContainer.style.marginLeft = '0';
      pageContainer.style.width = '100%';
    }
  });

  // Expand sidebar
  collapseBtn.addEventListener('click', function(e) {
    e.preventDefault();
    sidebar.classList.remove('d-none');
    sidebar.style.display = 'flex';
    sidebar.style.visibility = 'visible';
    sidebar.style.opacity = '1';
    sidebar.style.pointerEvents = 'auto';
    collapseBtn.classList.add('d-none');
    collapseBtn.style.display = 'none';
    document.body.classList.remove('sidebar-collapsed');
    if (pageContainer) {
      pageContainer.style.marginLeft = '280px';
      pageContainer.style.width = 'calc(100% - 280px)';
    }
  });
}

// Try multiple ways to ensure the script runs
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initializeSidebar);
} else {
  // DOM is already loaded
  initializeSidebar();
}

// Also try after a short delay as a fallback
setTimeout(initializeSidebar, 100);

// Now Playing Toggle Functionality
window.nowPlayingInitialized = false;

function initializeNowPlayingToggle() {
  if (window.nowPlayingInitialized) {
    console.log('Now Playing already initialized, skipping');
    return;
  }

  const nowPlayingToggle = document.getElementById('nowPlayingToggle');
  const nowPlayingContent = document.getElementById('nowPlayingContent');
  const nowPlayingCaretIcon = document.getElementById('nowPlayingCaretIcon');

  console.log('Initializing Now Playing toggle:', {
    toggle: !!nowPlayingToggle,
    content: !!nowPlayingContent,
    icon: !!nowPlayingCaretIcon
  });

  if (!nowPlayingToggle || !nowPlayingContent || !nowPlayingCaretIcon) {
    console.log('Now Playing elements not ready, retrying...');
    setTimeout(initializeNowPlayingToggle, 50);
    return;
  }

  window.nowPlayingInitialized = true;
  console.log('Now Playing toggle initialized successfully');

  nowPlayingToggle.addEventListener('click', function(e) {
    console.log('Now Playing toggle clicked!');
    e.preventDefault();
    e.stopPropagation();

    if (nowPlayingContent.classList.contains('d-none')) {
      // Expand
      console.log('Expanding Now Playing');
      nowPlayingContent.classList.remove('d-none');
      nowPlayingContent.style.display = 'block';
      nowPlayingCaretIcon.classList.remove('fa-caret-up');
      nowPlayingCaretIcon.classList.add('fa-caret-down');
    } else {
      // Collapse
      console.log('Collapsing Now Playing');
      nowPlayingContent.classList.add('d-none');
      nowPlayingContent.style.display = 'none';
      nowPlayingCaretIcon.classList.remove('fa-caret-down');
      nowPlayingCaretIcon.classList.add('fa-caret-up');
    }
  });
}

if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initializeNowPlayingToggle);
} else {
  initializeNowPlayingToggle();
}
setTimeout(initializeNowPlayingToggle, 100);

// Unified Sidebar Control (for pages with both left and right sidebars)
window.unifiedSidebarInitialized = false;

function initializeUnifiedSidebarControl() {
  if (window.unifiedSidebarInitialized) return;

  const unifiedCollapseBtn = document.getElementById('unifiedSidebarCollapseBtn');
  const unifiedExpandBtn = document.getElementById('unifiedSidebarExpandBtn');

  // Only initialize if unified buttons exist
  if (!unifiedCollapseBtn && !unifiedExpandBtn) return;

  const mainSidebar = document.getElementById('mainSidebar');
  const entriesSidebar = document.getElementById('entriesSidebar');
  const pageContainer = document.getElementById('pageContainer');

  if (!mainSidebar || !entriesSidebar) {
    setTimeout(initializeUnifiedSidebarControl, 50);
    return;
  }

  window.unifiedSidebarInitialized = true;
  console.log('Unified sidebar control initialized');

  // Check localStorage for saved sidebar state (cinema mode only)
  const savedState = localStorage.getItem('cinemaSidebarsExpanded');
  let shouldExpand = savedState === 'true';

  // Set initial state based on saved preference or default
  const areBothCollapsed = mainSidebar.classList.contains('d-none') && entriesSidebar.classList.contains('d-none');

  if (shouldExpand && areBothCollapsed) {
    // User wants sidebars expanded - show them
    console.log('Restoring expanded sidebar state from localStorage');

    mainSidebar.classList.remove('d-none');
    mainSidebar.style.display = 'flex';
    mainSidebar.style.visibility = 'visible';
    mainSidebar.style.opacity = '1';
    mainSidebar.style.pointerEvents = 'auto';

    entriesSidebar.classList.remove('d-none');
    entriesSidebar.style.display = 'flex';
    entriesSidebar.style.visibility = 'visible';
    entriesSidebar.style.opacity = '1';
    entriesSidebar.style.pointerEvents = 'auto';

    if (unifiedCollapseBtn) {
      unifiedCollapseBtn.classList.add('d-none');
      unifiedCollapseBtn.style.display = 'none';
    }

    document.body.classList.remove('sidebar-collapsed');
    document.body.classList.remove('entries-sidebar-collapsed');

    if (pageContainer) {
      pageContainer.style.marginLeft = '280px';
      pageContainer.style.marginRight = '350px';
      pageContainer.style.width = 'calc(100% - 630px)';
    }

    const watchControls = document.getElementById('watchCinemaControls');
    if (watchControls) {
      watchControls.style.setProperty('right', '390px', 'important');
    }
  } else if (areBothCollapsed) {
    console.log('Both sidebars collapsed on init - setting full width');

    if (pageContainer) {
      pageContainer.style.setProperty('margin-left', '0', 'important');
      pageContainer.style.setProperty('margin-right', '0', 'important');
      pageContainer.style.setProperty('width', '100%', 'important');
    }

    // Ensure sidebars are fully hidden
    mainSidebar.style.display = 'none';
    mainSidebar.style.visibility = 'hidden';
    mainSidebar.style.opacity = '0';
    mainSidebar.style.pointerEvents = 'none';

    entriesSidebar.style.display = 'none';
    entriesSidebar.style.visibility = 'hidden';
    entriesSidebar.style.opacity = '0';
    entriesSidebar.style.pointerEvents = 'none';

    // Show unified collapse button
    if (unifiedCollapseBtn) {
      unifiedCollapseBtn.style.display = 'block';
    }

    // Ensure cinema controls are positioned correctly
    const watchControls = document.getElementById('watchCinemaControls');
    if (watchControls) {
      watchControls.style.setProperty('right', '120px', 'important');
      watchControls.style.setProperty('left', 'auto', 'important');
    }
  }

  // Collapse both sidebars - listen to all collapse buttons
  const collapseButtons = document.querySelectorAll('.unified-collapse-btn');
  collapseButtons.forEach(btn => {
    btn.addEventListener('click', function(e) {
      e.preventDefault();
      console.log('Collapsing both sidebars');

      // Hide both sidebars
      mainSidebar.classList.add('d-none');
      mainSidebar.style.display = 'none';
      mainSidebar.style.visibility = 'hidden';
      mainSidebar.style.opacity = '0';
      mainSidebar.style.pointerEvents = 'none';

      entriesSidebar.classList.add('d-none');
      entriesSidebar.style.display = 'none';
      entriesSidebar.style.visibility = 'hidden';
      entriesSidebar.style.opacity = '0';
      entriesSidebar.style.pointerEvents = 'none';

      // Show unified collapse button
      if (unifiedCollapseBtn) {
        unifiedCollapseBtn.classList.remove('d-none');
        unifiedCollapseBtn.style.display = 'block';
      }

      document.body.classList.add('sidebar-collapsed');
      document.body.classList.add('entries-sidebar-collapsed');

      if (pageContainer) {
        pageContainer.style.marginLeft = '0';
        pageContainer.style.marginRight = '0';
        pageContainer.style.width = '100%';
      }

      // Adjust cinema controls
      const watchControls = document.getElementById('watchCinemaControls');
      if (watchControls) {
        watchControls.style.setProperty('right', '120px', 'important');
      }

      // Save state to localStorage
      localStorage.setItem('cinemaSidebarsExpanded', 'false');
    });
  });

  // Expand both sidebars
  if (unifiedCollapseBtn) {
    unifiedCollapseBtn.addEventListener('click', function(e) {
      e.preventDefault();
      console.log('Expanding both sidebars');

      // Show both sidebars
      mainSidebar.classList.remove('d-none');
      mainSidebar.style.display = 'flex';
      mainSidebar.style.visibility = 'visible';
      mainSidebar.style.opacity = '1';
      mainSidebar.style.pointerEvents = 'auto';

      entriesSidebar.classList.remove('d-none');
      entriesSidebar.style.display = 'flex';
      entriesSidebar.style.visibility = 'visible';
      entriesSidebar.style.opacity = '1';
      entriesSidebar.style.pointerEvents = 'auto';

      // Hide unified collapse button
      unifiedCollapseBtn.classList.add('d-none');
      unifiedCollapseBtn.style.display = 'none';

      document.body.classList.remove('sidebar-collapsed');
      document.body.classList.remove('entries-sidebar-collapsed');

      if (pageContainer) {
        pageContainer.style.marginLeft = '280px';
        pageContainer.style.marginRight = '350px';
        pageContainer.style.width = 'calc(100% - 630px)';
      }

      // Adjust cinema controls
      const watchControls = document.getElementById('watchCinemaControls');
      if (watchControls) {
        watchControls.style.setProperty('right', '390px', 'important');
      }

      // Save state to localStorage
      localStorage.setItem('cinemaSidebarsExpanded', 'true');
    });
  }
}

if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initializeUnifiedSidebarControl);
} else {
  initializeUnifiedSidebarControl();
}
setTimeout(initializeUnifiedSidebarControl, 100);
</script>
